目的：
    定义了一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。该模式使得算法可以独立于使用它的客户而变化。

适用性：
    （1）许多类仅仅是行为差异（不同的行为抽象成一个策略，比如排序算法、换行算法）
    （2）需要使用一个算法的不同变体。
    （3）算法使用客户不应该知道的数据。（用户只需要知道有哪几种算法可以用，不同的算法优缺点是什么，具体算法如何实现的不需要关注）
    （4）一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现。

参与者：
    （1）Strategy
    （2）ConcreteStrategy
    （3）Context

优点：
     抽象流程、封装策略（共有功能抽象出来，差异化的部分抽象成策略，分别实现）
    （1）可以替代继承（继承 Context，需要将 Strategy 与 Context 中的通用流程冗余在一起）
    （2）消除一些条件语句
    （3）客户端需要了解不同的策略
    （4）Context与Strategy之间存在通信开销
